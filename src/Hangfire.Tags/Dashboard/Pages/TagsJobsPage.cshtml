@* Generator: Template TypeVisibility: Internal GeneratePrettyNames: True *@
@using System.Collections.Generic
@using System.Linq
@using System.Text.RegularExpressions
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@using Hangfire.Dashboard.Resources
@using Hangfire.Tags.Dashboard.Monitoring;
@using Hangfire.Tags.Storage
@using Hangfire.Storage.Monitoring;
@using Hangfire.Tags
@using Hangfire.Tags.Dashboard
@inherits TagsRazorPage
@{
    Layout = new LayoutPage("Tags");

    int.TryParse(Query("from"), out var from);
    int.TryParse(Query("count"), out var perPage);

    var tags = new string[0];
    string state = null;

    var match = Regex.Match(RequestPath, "^/tags/search(/(?<tags>[^/]+))(/(?<state>[^/]+))?");
    if (match.Success)
    {
        tags = match.Groups["tags"].Value.Split(',');
        state = match.Groups["state"].Value;
    }
    Pager pager;

    var tagsListStyle = Options.TagsListStyle;

    var relatedTags = new List<string>();

    JobList<MatchingJobDto> matchingJobs;
    IDictionary<string, int> matchingStates = null;
    using (var tagStorage = new TagsStorage(Storage))
    {
        var monitor = tagStorage.GetMonitoringApi();

        if (tagsListStyle == TagsListStyle.Dropdown && tags.Length == 1)
        {
            relatedTags = monitor.SearchRelatedTags(tags.First()).ToList();
        }

        pager = new Pager(from, perPage, monitor.GetJobCount(tags, state));
        if (pager.TotalPageCount == 0)
        {
            matchingJobs = new JobList<MatchingJobDto>(Enumerable.Empty<KeyValuePair<string, MatchingJobDto>>());
        }
        else
        {
            matchingJobs = monitor.GetMatchingJobs(tags, pager.FromRecord, pager.RecordsPerPage, state);
            matchingStates = monitor.GetJobStateCount(tags);
        }
    }

}

@if (tagsListStyle == TagsListStyle.Dropdown && tags.Length == 1 && relatedTags.Any())
{
    <script>
        function go(tag) {
            var baseUrl = "@Url.To("/tags/search/" + tags.First() + ",")";
            window.location = baseUrl + tag;
        }
    </script>
}
<div class="row">
    <div class="col-md-3">
        @Html.JobsSidebar()
    </div>
    <div class="col-md-9">
        @if (tags.Length == 1)
        {
            <h1 class="page-header">标签：@tags[0]</h1>
        }
        else if (tags.Length > 1)
        {
            <h1 class="page-header">标签：@string.Join(", ", tags)</h1>
        }
        else
        {
            <h1 class="page-header">标签</h1>
        }

        @if (tagsListStyle == TagsListStyle.Dropdown && tags.Length == 1 && relatedTags.Any())
        {
            <div class="col-md-12 related-tags">
                <datalist id="hangfireTagsList">
                    @foreach (var t in relatedTags)
                    {
                        <option value="@t"></option>
                    }
                </datalist>
                <div class="col-md-10">
                    <input class="form-control" id="selectedTag" list="hangfireTagsList" autocomplete="off" placeholder="Select a related tag" />
                </div>
                <div class="col-md-2">
                    <button id="btn_go" class="btn" onclick="go(document.getElementById('selectedTag').value)">Go</button>
                </div>
            </div>
        }

        @{
            // Show a page with a list of matching jobs

            if (pager.TotalPageCount == 0)
            {
                <div class="alert alert-info">
                    所选标签内未找到任何作业
                </div>
            }
            else
            {
                if (!(matchingStates is null) && matchingStates.Any())
                {
                    <div class="js-state-list">
                        <div class="btn-toolbar btn-toolbar-top">
                            @foreach (var matchingState in matchingStates)
                            {
                                var css = state == matchingState.Key ? "btn-primary" : "";
                                <a role="button" href="@Url.To("/tags/search/" + string.Join(",", tags) + "/" + matchingState.Key)" class="js-state-list-command btn btn-sm @css">@matchingState.Key <span class="badge">@matchingState.Value</span></a>
                            }
                        </div>
                    </div>
                }

                <div class="js-jobs-list">

                    <div class="btn-toolbar btn-toolbar-top">
                        @if (!IsReadOnly)
                        {
                            <button class="js-jobs-list-command btn btn-sm btn-primary"
                                    data-url="@Url.To("/jobs/enqueued/requeue")"
                                    data-loading-text="@Strings.Common_Enqueueing"
                                    disabled="disabled">
                                <span class="glyphicon glyphicon-repeat"></span>
                                @Strings.Common_RequeueJobs
                            </button>
                        }
                        @if (!IsReadOnly)
                        {
                            <button class="js-jobs-list-command btn btn-sm btn-default"
                                    data-url="@Url.To("/jobs/enqueued/delete")"
                                    data-loading-text="@Strings.Common_Deleting"
                                    data-confirm="@Strings.Common_DeleteConfirm"
                                    disabled="disabled">
                                <span class="glyphicon glyphicon-remove"></span>
                                @Strings.Common_DeleteSelected
                            </button>

                        }
                        @Html.PerPageSelector(pager)
                    </div>

                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    @if (!IsReadOnly)
                                    {
                                        <th class="min-width">
                                            <input type="checkbox" class="js-jobs-list-select-all" />
                                        </th>
                                    }
                                    <th class="min-width">@Strings.Common_Id</th>
                                    <th>@Strings.Common_Job</th>
                                    <th class="min-width">@Strings.Common_State</th>
                                    <th class="min-width">@Strings.RecurringJobsPage_Table_LastExecution</th>
                                    <th class="min-width align-right">@Strings.SucceededJobsPage_Table_TotalDuration</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var job in matchingJobs)
                                {
                                    <tr class="js-jobs-list-row">
                                        @if (!IsReadOnly)
                                        {
                                            <td>
                                                <input type="checkbox" class="js-jobs-list-checkbox" name="jobs[]" value="@job.Key" />
                                            </td>
                                        }
                                        <td class="min-width">
                                            @Html.JobIdLink(job.Key)
                                        </td>

                                        @if (job.Value == null)
                                        {
                                            <td colspan="3">
                                                <em>@Strings.Common_JobExpired</em>
                                            </td>
                                        }
                                        else
                                        {
                                            <td class="word-break">
                                                @Html.JobNameLink(job.Key, job.Value.Job)
                                            </td>
                                            <td class="min-width">
                                                @job.Value.State
                                            </td>
                                            <td class="min-width">
                                                @if (job.Value.ResultAt.HasValue)
                                                {
                                                    @Html.RelativeTime(job.Value.ResultAt.Value)
                                                }
                                            </td>
                                            <td class="min-width align-right">
                                                @{
                                                    var fromDate = job.Value.EnqueueAt ?? job.Value.CreatedAt;
                                                }
                                                @if (fromDate.HasValue && job.Value.ResultAt.HasValue)
                                                {
                                                    @Html.Raw((job.Value.ResultAt.Value - fromDate.Value).ToString(@"hh\:mm\:ss\.fff"))
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    @Html.Paginator(pager)
                </div>
            }
        }
    </div>
</div>
